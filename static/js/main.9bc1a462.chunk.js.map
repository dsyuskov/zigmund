{"version":3,"sources":["reducers/ui.ts","actions/ui.ts","reducers/repositories.ts","actions/repositories.ts","reducers/index.ts","sagas/saga.ts","store/store.ts","components/search/Search.tsx","components/repItem/star.tsx","components/repItem/fork.tsx","components/repItem/watcher.tsx","components/repItem/repItem.tsx","components/loader/loader.tsx","components/pagination/pagination.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["initialUIState","isLoading","UIState","state","action","type","initialRepositoryState","totalCount","arrayRepos","query","companyName","perPage","page","repositoryState","payload","rootReducer","combineReducers","getRepositories","watchGetRepositories","API","fetchRepos","axios","then","response","data","fetchTotalCount","public_repos","put","call","result","forEach","element","push","id","name","url","html_url","forksCount","forks_count","watchersCount","watchers_count","stargazersCount","stargazers_count","description","takeEvery","sagaMiddleWare","createSagaMiddleware","store","createStore","reducer","applyMiddleware","run","Search","props","classesList","useState","searchString","setSearchString","onSearch","className","value","onChange","event","target","onKeyPress","key","placeholder","onClick","Star","height","viewBox","version","width","aria-hidden","fillRule","d","starCount","Fork","aria-label","forkCount","Watcher","watcherCount","RepItem","repos","href","Loader","Pagination","array","setArray","allPages","pagination","currentPage","i","useEffect","map","item","Math","random","join","pageNumber","connect","dispatch","Fragment","rep","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9bc1a462.chunk.js","sourcesContent":["import { IS_LOADING, ChangeLoadingActionType } from '../actions/ui';\n\nconst initialUIState = {\n  isLoading: false,\n};\n\nexport type UIStateType = typeof initialUIState;\n\nconst UIState = (\n  state = initialUIState,\n  action: ChangeLoadingActionType\n): UIStateType => {\n  switch (action.type) {\n    case IS_LOADING: {\n      return {\n        ...state,\n        isLoading: !state.isLoading,\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n};\n\nexport default UIState;\n","export const IS_LOADING = 'IS_LOADING';\n\nexport type ChangeLoadingActionType = {\n  type: typeof IS_LOADING;\n};\n\nexport const changeLoading = (): ChangeLoadingActionType => {\n  return {\n    type: IS_LOADING,\n  };\n};\n","import {\n  CHANGE_SEARCH_QUERY,\n  ADD_REPOSITORIES,\n  ADD_TOTAL_REPOSITORIES,\n  ChangeSearchQueryActionType,\n  AddRepositoriesActionType,\n  AddTotalRepositoriesActionType,\n} from '../actions/repositories';\n\nexport type ReposType = {\n  id: number;\n  name: string;\n  url: string;\n  forksCount: number;\n  watchersCount: number;\n  stargazersCount: number;\n  description: string;\n};\n\nexport type QyeryType = {\n  companyName: string;\n  perPage: number;\n  page: number;\n};\n\nexport const initialRepositoryState = {\n  totalCount: 0,\n  arrayRepos: [] as Array<ReposType>,\n  query: {\n    companyName: '',\n    perPage: 10,\n    page: 1,\n  },\n};\n\nexport type RepositoryStateType = typeof initialRepositoryState;\n\nconst repositoryState = (\n  state = initialRepositoryState,\n  action:\n    | AddRepositoriesActionType\n    | AddTotalRepositoriesActionType\n    | ChangeSearchQueryActionType\n): RepositoryStateType => {\n  switch (action.type) {\n    case CHANGE_SEARCH_QUERY: {\n      return {\n        ...state,\n        query: action.payload,\n      };\n    }\n    case ADD_REPOSITORIES: {\n      return {\n        ...state,\n        arrayRepos: action.payload,\n      };\n    }\n    case ADD_TOTAL_REPOSITORIES: {\n      return {\n        ...state,\n        totalCount: action.payload,\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n};\n\nexport default repositoryState;\n","import { ReposType, QyeryType } from '../reducers/repositories';\n\nexport const CHANGE_SEARCH_QUERY = 'CHANGE_SEARCH_QUERY';\nexport const ADD_REPOSITORIES = 'ADD_REPOSITORIES';\nexport const GET_REPOSITORIES = 'GET_REPOSITORIES';\nexport const ADD_TOTAL_REPOSITORIES = 'ADD_TOTAL_REPOSITORIES';\n\nexport type ChangeSearchQueryActionType = {\n  type: typeof CHANGE_SEARCH_QUERY;\n  payload: QyeryType;\n};\n\nexport const changeSearchQuery = (value: QyeryType):ChangeSearchQueryActionType => {\n  return {\n    type: CHANGE_SEARCH_QUERY,\n    payload: value,\n  };\n};\n\nexport type GetRepositoriesActionsType = {\n  type: typeof GET_REPOSITORIES;\n  payload: QyeryType;\n};\n\nexport const getRepositories = (\n  query: QyeryType\n): GetRepositoriesActionsType => {\n  return {\n    type: GET_REPOSITORIES,\n    payload: query,\n  };\n};\n\nexport type AddRepositoriesActionType = {\n  type: typeof ADD_REPOSITORIES;\n  payload: Array<ReposType>;\n};\n\nexport const addRepositories = (\n  repos: Array<ReposType>\n): AddRepositoriesActionType => {\n  return {\n    type: ADD_REPOSITORIES,\n    payload: repos,\n  };\n};\n\nexport type AddTotalRepositoriesActionType = {\n  type: typeof ADD_TOTAL_REPOSITORIES;\n  payload: number;\n};\n\nexport const addTotalRepositories = (\n  count: number\n): AddTotalRepositoriesActionType => {\n  return {\n    type: ADD_TOTAL_REPOSITORIES,\n    payload: count,\n  };\n};\n","import { combineReducers } from 'redux';\nimport UIState, { UIStateType } from './ui';\nimport repositoryState, { RepositoryStateType } from './repositories';\n\nexport type RootReducerType = {\n  UIState: UIStateType;\n  repositoryState: RepositoryStateType;\n};\n\nconst rootReducer = combineReducers<RootReducerType>({\n  UIState,\n  repositoryState,\n});\n\nexport default rootReducer;\n","import { put, takeEvery, call } from 'redux-saga/effects';\nimport axios from 'axios';\n\nimport {\n  ADD_REPOSITORIES,\n  GET_REPOSITORIES,\n  ADD_TOTAL_REPOSITORIES,\n  GetRepositoriesActionsType,\n  CHANGE_SEARCH_QUERY,\n} from '../actions/repositories';\nimport { IS_LOADING } from '../actions/ui';\nimport { ReposType, QyeryType } from '../reducers/repositories';\n\nconst API = 'https://api.github.com';\n\nconst fetchRepos = (query: QyeryType) => {\n  return axios(\n    `${API}/orgs/${query.companyName}/repos?per_page=${query.perPage}&page=${query.page}`\n  ).then((response) => {\n    return response.data;\n  });\n};\n\nconst fetchTotalCount = (query: QyeryType) => {\n  return axios(`${API}/orgs/${query.companyName}`).then((response) => {\n    return response.data.public_repos;\n  });\n};\n\nexport function* getRepositories(action: GetRepositoriesActionsType) {\n  try {\n    yield put({ type: IS_LOADING });\n    yield put({ type: CHANGE_SEARCH_QUERY, payload: action.payload });\n    const result = yield call(fetchRepos, action.payload);\n    const totalCount = yield call(fetchTotalCount, action.payload);\n\n    const payload: Array<ReposType> = [];\n    result.forEach((element: any) => {\n      payload.push({\n        id: element.id,\n        name: element.name,\n        url: element.html_url,\n        forksCount: element.forks_count,\n        watchersCount: element.watchers_count,\n        stargazersCount: element.stargazers_count,\n        description: element.description,\n      });\n    });\n    yield put({ type: ADD_REPOSITORIES, payload: payload });\n    yield put({ type: ADD_TOTAL_REPOSITORIES, payload: totalCount });\n    yield put({ type: IS_LOADING });\n  } catch {\n    yield put({ type: ADD_REPOSITORIES, payload: [] });\n    yield put({ type: ADD_TOTAL_REPOSITORIES, payload: 0 });\n    yield put({ type: IS_LOADING });\n  }\n}\n\nexport function* watchGetRepositories() {\n  yield takeEvery(GET_REPOSITORIES, getRepositories);\n}\n","import { createStore, applyMiddleware } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport reducer from '../reducers/index';\n\nimport { watchGetRepositories } from '../sagas/saga';\n\nconst sagaMiddleWare = createSagaMiddleware();\n\nconst store = createStore(reducer, applyMiddleware(sagaMiddleWare));\n\nsagaMiddleWare.run(watchGetRepositories);\n\nexport default store;\n","import React, { useState } from 'react';\nimport { QyeryType } from '../../reducers/repositories';\n\nimport './search.scss';\n\ntype SearchPropsType = {\n  classesList?: string;\n  onSearch: (value: QyeryType) => void;\n};\n\nconst Search: React.FC<SearchPropsType> = (props) => {\n  const { classesList } = props;\n  const [searchString, setSearchString] = useState('');\n\n  const onChangeHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchString(event.target.value);\n  };\n\n  const onSearch = () => {\n    props.onSearch({\n      companyName: searchString,\n      page: 1,\n      perPage: 10,\n    });\n  };\n\n  const onEnterHandler = (event: React.KeyboardEvent) => {\n    if (event.key === 'Enter') {\n      onSearch();\n    }\n  };\n\n  return (\n    <div className={`search ${classesList}`}>\n      <input\n        value={searchString}\n        onChange={onChangeHandler}\n        onKeyPress={onEnterHandler}\n        className=\"search__input\"\n        type=\"text\"\n        placeholder=\"Enter company name\"\n      />\n      <button className=\"search__button\" onClick={onSearch}>\n        Search\n      </button>\n    </div>\n  );\n};\n\nexport default Search;\n","import React from 'react';\n\ntype StarPropsType = {\n  starCount: number;\n};\n\nconst Star: React.FC<StarPropsType> = (props) => {\n  return (\n    <div className=\"icon\">\n      <svg\n        height=\"16\"\n        viewBox=\"0 0 16 16\"\n        version=\"1.1\"\n        width=\"16\"\n        aria-hidden=\"true\"\n      >\n        <path\n          fillRule=\"evenodd\"\n          d=\"M8 .25a.75.75 0 01.673.418l1.882 3.815 4.21.612a.75.75 0 01.416 1.279l-3.046 2.97.719 4.192a.75.75 0 01-1.088.791L8 12.347l-3.766 1.98a.75.75 0 01-1.088-.79l.72-4.194L.818 6.374a.75.75 0 01.416-1.28l4.21-.611L7.327.668A.75.75 0 018 .25zm0 2.445L6.615 5.5a.75.75 0 01-.564.41l-3.097.45 2.24 2.184a.75.75 0 01.216.664l-.528 3.084 2.769-1.456a.75.75 0 01.698 0l2.77 1.456-.53-3.084a.75.75 0 01.216-.664l2.24-2.183-3.096-.45a.75.75 0 01-.564-.41L8 2.694v.001z\"\n        ></path>\n      </svg>\n      <span className=\"icon__count\">{props.starCount}</span>\n    </div>\n  );\n};\nexport default Star;\n","import React from 'react';\n\ntype ForkPropsType = {\n  forkCount: number;\n};\n\nconst Fork: React.FC<ForkPropsType> = (props) => {\n  return (\n    <div className=\"icon\">\n      <svg\n        aria-label=\"fork\"\n        height=\"16\"\n        viewBox=\"0 0 16 16\"\n        version=\"1.1\"\n        width=\"16\"\n        aria-hidden=\"true\"\n      >\n        <path\n          fillRule=\"evenodd\"\n          d=\"M5 3.25a.75.75 0 11-1.5 0 .75.75 0 011.5 0zm0 2.122a2.25 2.25 0 10-1.5 0v.878A2.25 2.25 0 005.75 8.5h1.5v2.128a2.251 2.251 0 101.5 0V8.5h1.5a2.25 2.25 0 002.25-2.25v-.878a2.25 2.25 0 10-1.5 0v.878a.75.75 0 01-.75.75h-4.5A.75.75 0 015 6.25v-.878zm3.75 7.378a.75.75 0 11-1.5 0 .75.75 0 011.5 0zm3-8.75a.75.75 0 100-1.5.75.75 0 000 1.5z\"\n        ></path>\n      </svg>\n      <span className=\"icon__count\">{props.forkCount}</span>\n    </div>\n  );\n};\nexport default Fork;\n","import React from 'react';\n\ntype watcherPropsType = {\n  watcherCount: number;\n};\n\nconst Watcher: React.FC<watcherPropsType> = (props) => {\n  return (\n    <div className=\"icon\">\n      <svg\n        height=\"16\"\n        viewBox=\"0 0 16 16\"\n        version=\"1.1\"\n        width=\"16\"\n        aria-hidden=\"true\"\n      >\n        <path d=\"M1.679 7.932c.412-.621 1.242-1.75 2.366-2.717C5.175 4.242 6.527 3.5 8 3.5c1.473 0 2.824.742 3.955 1.715 1.124.967 1.954 2.096 2.366 2.717a.119.119 0 010 .136c-.412.621-1.242 1.75-2.366 2.717C10.825 11.758 9.473 12.5 8 12.5c-1.473 0-2.824-.742-3.955-1.715C2.92 9.818 2.09 8.69 1.679 8.068a.119.119 0 010-.136zM8 2c-1.981 0-3.67.992-4.933 2.078C1.797 5.169.88 6.423.43 7.1a1.619 1.619 0 000 1.798c.45.678 1.367 1.932 2.637 3.024C4.329 13.008 6.019 14 8 14c1.981 0 3.67-.992 4.933-2.078 1.27-1.091 2.187-2.345 2.637-3.023a1.619 1.619 0 000-1.798c-.45-.678-1.367-1.932-2.637-3.023C11.671 2.992 9.981 2 8 2zm0 8a2 2 0 100-4 2 2 0 000 4z\"></path>\n      </svg>\n      <span className=\"icon__count\">{props.watcherCount}</span>\n    </div>\n  );\n};\n\nexport default Watcher;\n","import React from 'react';\nimport { ReposType } from '../../reducers/repositories';\nimport Star from './star';\nimport Fork from './fork';\nimport Watcher from './watcher';\n\nimport './repItem.scss';\n\ntype RepItemPropsType = {\n  classesList?: string;\n  repos: ReposType;\n};\n\nconst RepItem: React.FC<RepItemPropsType> = (props) => {\n  const { classesList, repos } = props;\n  const {\n    name,\n    url,\n    forksCount,\n    watchersCount,\n    stargazersCount,\n    description,\n  } = repos;\n\n  return (\n    <div className={`rep-item ${classesList}`}>\n      <div className=\"rep-item__name\">\n        <a href={url}>{name}</a>\n      </div>\n      <div className=\"rep-item__description\">{description}</div>\n      <div className=\"rep-item__info\">\n        <Star starCount={stargazersCount} />\n        <Fork forkCount={forksCount} />\n        <Watcher watcherCount={watchersCount} />\n      </div>\n    </div>\n  );\n};\n\nexport default RepItem;\n","import React from 'react';\nimport './loader.scss';\n\ntype LoaderPropsType = {\n  classesList?: string;\n};\n\nconst Loader: React.FC<LoaderPropsType> = (props) => {\n  const { classesList } = props;\n  return <div className={`loader ${classesList}`}></div>;\n};\n\nexport default Loader;\n","import React, { useState, useEffect } from 'react';\nimport { QyeryType } from '../../reducers/repositories';\nimport './pagination.scss';\n\ntype PaginationPropsType = {\n  classesList?: string;\n  totalCount: number;\n  query: QyeryType;\n  onSearch: (value: QyeryType) => void;\n};\n\nconst Pagination: React.FC<PaginationPropsType> = (props) => {\n  const { classesList, totalCount, query, onSearch } = props;\n  const { perPage, page } = query;\n  const [array, setArray] = useState([] as Array<number>);\n\n  const allPages =\n    totalCount % perPage !== 0\n      ? (totalCount - (totalCount % perPage)) / perPage + 1\n      : totalCount / perPage;\n\n  const onClickHandler = (pageNumber: number) => {\n    if (pageNumber !== 0) {\n      setArray(pagination(pageNumber));\n      onSearch({\n        ...query,\n        page: pageNumber,\n      });\n    }\n  };\n\n  const pagination = (currentPage: number): Array<number> => {\n    const result: Array<number> = [];\n\n    if (allPages > 1 && allPages <= 10) {\n      for (let i = 1; i <= 10; i++) {\n        result.push(i);\n      }\n    } else {\n      for (let i = 1; i <= allPages; i++) {\n        if (\n          i <= 2 ||\n          (currentPage <= 5 && i <= 5) ||\n          (i >= currentPage - 1 && i <= currentPage + 1) ||\n          (currentPage > allPages - 5 && i > allPages - 5) ||\n          i > allPages - 2\n        ) {\n          result.push(i);\n        } else if (\n          (currentPage > 5 && i === 3) ||\n          (currentPage < allPages - 4 && i === allPages - 3)\n        ) {\n          result.push(0);\n        }\n      }\n    }\n    return result;\n  };\n\n  useEffect(() => {\n    setArray(pagination(query.page));\n  }, []);\n\n  return (\n    <ul className={`pagination ${classesList}`}>\n      {allPages > 1 &&\n        array.map((item) => {\n          const classesList: Array<string> = [];\n          if (item === page) {\n            classesList.push('pagination__item--active');\n          }\n          if (item === 0) {\n            classesList.push('pagination__item--no-click');\n          }\n          return (\n            <li\n              key={`${item}${Math.random()}${Math.random()}`}\n              className={`pagination__item ${classesList.join(' ')}`}\n              onClick={() => onClickHandler(item)}\n            >\n              {item !== 0 ? item : '...'}\n            </li>\n          );\n        })}\n    </ul>\n  );\n};\n\nexport default Pagination;\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport Search from './components/search/Search';\nimport RepItem from './components/repItem/repItem';\nimport Loader from './components/loader/loader';\nimport Pagination from './components/pagination/pagination';\n\nimport { RootReducerType } from './reducers/index';\nimport { getRepositories } from './actions/repositories';\nimport { UIStateType } from './reducers/ui';\nimport {\n  ReposType,\n  QyeryType,\n  RepositoryStateType,\n} from './reducers/repositories';\n\nimport './app.scss';\n\ntype AppPropsType = {\n  UIState: UIStateType;\n  repositoryState: RepositoryStateType;\n  getRepositories: (value: QyeryType) => void;\n};\n\nconst App: React.FC<AppPropsType> = (props) => {\n  const { repositoryState, UIState, getRepositories } = props;\n\n  return (\n    <React.Fragment>\n      <div className=\"container\">\n        <Search classesList=\"search--margin\" onSearch={getRepositories} />\n\n        {UIState.isLoading && <Loader />}\n\n        {!UIState.isLoading && (\n          <div className=\"repository-list\">\n            {repositoryState.arrayRepos.map((rep: ReposType) => {\n              return <RepItem repos={rep} key={rep.id} />;\n            })}\n            {repositoryState.totalCount > 0 && (\n              <Pagination\n                totalCount={repositoryState.totalCount}\n                query={repositoryState.query}\n                onSearch={getRepositories}\n              />\n            )}\n            {repositoryState.query.companyName !== '' &&\n              repositoryState.totalCount === 0 && (\n                <div className=\"no-result\">\n                  Company{' '}\n                  <span className=\"no-result__company-name\">\n                    {repositoryState.query.companyName}\n                  </span>{' '}\n                  not found.\n                </div>\n              )}\n          </div>\n        )}\n      </div>\n    </React.Fragment>\n  );\n};\n\nconst mapStateToProps = (state: RootReducerType) => {\n  const { repositoryState, UIState } = state;\n  return { repositoryState, UIState };\n};\n\nconst mapDispatchToProps = (dispatch: any) => ({\n  getRepositories: (value: QyeryType) => dispatch(getRepositories(value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './store/store';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}